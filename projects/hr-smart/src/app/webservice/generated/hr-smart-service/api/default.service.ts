/**
 * HR-Smart Logging-Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ParticipantEntry } from '../model/participantEntry';
import { SmartActionTypeEntry } from '../model/smartActionTypeEntry';
import { SmartObjectEntry } from '../model/smartObjectEntry';
import { TrainingEntry } from '../model/trainingEntry';
import { UserEntry } from '../model/userEntry';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class DefaultService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * participants-Endpoint-post
     * 
     * @param participantEntry null
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addParticipants(participantEntry: ParticipantEntry, observe?: 'body', reportProgress?: boolean): Observable<ParticipantEntry>;
    public addParticipants(participantEntry: ParticipantEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ParticipantEntry>>;
    public addParticipants(participantEntry: ParticipantEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ParticipantEntry>>;
    public addParticipants(participantEntry: ParticipantEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (participantEntry === null || participantEntry === undefined) {
            throw new Error('Required parameter participantEntry was null or undefined when calling addParticipants.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ParticipantEntry>(`${this.basePath}/participant`,
            participantEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * smartActionType-Endpoint-post
     * 
     * @param smartActionTypeEntry SmartActionType entry to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSmartActionType(smartActionTypeEntry: SmartActionTypeEntry, observe?: 'body', reportProgress?: boolean): Observable<SmartActionTypeEntry>;
    public addSmartActionType(smartActionTypeEntry: SmartActionTypeEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SmartActionTypeEntry>>;
    public addSmartActionType(smartActionTypeEntry: SmartActionTypeEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SmartActionTypeEntry>>;
    public addSmartActionType(smartActionTypeEntry: SmartActionTypeEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (smartActionTypeEntry === null || smartActionTypeEntry === undefined) {
            throw new Error('Required parameter smartActionTypeEntry was null or undefined when calling addSmartActionType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SmartActionTypeEntry>(`${this.basePath}/smartActionType`,
            smartActionTypeEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-post
     * 
     * @param smartObjectEntry null
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'body', reportProgress?: boolean): Observable<SmartObjectEntry>;
    public addSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SmartObjectEntry>>;
    public addSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SmartObjectEntry>>;
    public addSmartObject(smartObjectEntry: SmartObjectEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (smartObjectEntry === null || smartObjectEntry === undefined) {
            throw new Error('Required parameter smartObjectEntry was null or undefined when calling addSmartObject.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SmartObjectEntry>(`${this.basePath}/smartObject`,
            smartObjectEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Training-Endpoint-post
     * 
     * @param trainingEntry Training entry to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTraining(trainingEntry: TrainingEntry, observe?: 'body', reportProgress?: boolean): Observable<TrainingEntry>;
    public addTraining(trainingEntry: TrainingEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingEntry>>;
    public addTraining(trainingEntry: TrainingEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingEntry>>;
    public addTraining(trainingEntry: TrainingEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (trainingEntry === null || trainingEntry === undefined) {
            throw new Error('Required parameter trainingEntry was null or undefined when calling addTraining.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TrainingEntry>(`${this.basePath}/training`,
            trainingEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User-Endpoint-post
     * 
     * @param userEntry User entry to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUser(userEntry: UserEntry, observe?: 'body', reportProgress?: boolean): Observable<UserEntry>;
    public addUser(userEntry: UserEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserEntry>>;
    public addUser(userEntry: UserEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserEntry>>;
    public addUser(userEntry: UserEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userEntry === null || userEntry === undefined) {
            throw new Error('Required parameter userEntry was null or undefined when calling addUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserEntry>(`${this.basePath}/user`,
            userEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * participants-Endpoint-delete
     * 
     * @param id The Participant  ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteParticipant(id: string, observe?: 'body', reportProgress?: boolean): Observable<ParticipantEntry>;
    public deleteParticipant(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ParticipantEntry>>;
    public deleteParticipant(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ParticipantEntry>>;
    public deleteParticipant(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteParticipant.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ParticipantEntry>(`${this.basePath}/participant/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-get
     * 
     * @param id The Participant  ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParticipant(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ParticipantEntry>>;
    public getParticipant(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ParticipantEntry>>>;
    public getParticipant(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ParticipantEntry>>>;
    public getParticipant(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getParticipant.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ParticipantEntry>>(`${this.basePath}/participant/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-get
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParticipants(observe?: 'body', reportProgress?: boolean): Observable<Array<ParticipantEntry>>;
    public getParticipants(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ParticipantEntry>>>;
    public getParticipants(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ParticipantEntry>>>;
    public getParticipants(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ParticipantEntry>>(`${this.basePath}/participant`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartActionType-Endpoint-get
     * 
     * @param id Smart Action Type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSmartActionType(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SmartActionTypeEntry>>;
    public getSmartActionType(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SmartActionTypeEntry>>>;
    public getSmartActionType(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SmartActionTypeEntry>>>;
    public getSmartActionType(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSmartActionType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SmartActionTypeEntry>>(`${this.basePath}/smartActionType/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-get
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSmartObjects(observe?: 'body', reportProgress?: boolean): Observable<Array<SmartObjectEntry>>;
    public getSmartObjects(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SmartObjectEntry>>>;
    public getSmartObjects(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SmartObjectEntry>>>;
    public getSmartObjects(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SmartObjectEntry>>(`${this.basePath}/smartObject`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Training-Endpoint-get
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrainings(observe?: 'body', reportProgress?: boolean): Observable<Array<TrainingEntry>>;
    public getTrainings(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrainingEntry>>>;
    public getTrainings(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrainingEntry>>>;
    public getTrainings(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TrainingEntry>>(`${this.basePath}/training`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * UserSmartObject-Endpoint-get
     * 
     * @param id The user ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserSmartObjects(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SmartObjectEntry>>;
    public getUserSmartObjects(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SmartObjectEntry>>>;
    public getUserSmartObjects(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SmartObjectEntry>>>;
    public getUserSmartObjects(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserSmartObjects.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SmartObjectEntry>>(`${this.basePath}/userSmartObject/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * list-User-Endpoint
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserEntry>>;
    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserEntry>>>;
    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserEntry>>>;
    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserEntry>>(`${this.basePath}/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Test-Endpoint
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public test(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public test(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public test(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public test(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/test`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-put
     * 
     * @param participantEntry null
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateParticipants(participantEntry: ParticipantEntry, observe?: 'body', reportProgress?: boolean): Observable<ParticipantEntry>;
    public updateParticipants(participantEntry: ParticipantEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ParticipantEntry>>;
    public updateParticipants(participantEntry: ParticipantEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ParticipantEntry>>;
    public updateParticipants(participantEntry: ParticipantEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (participantEntry === null || participantEntry === undefined) {
            throw new Error('Required parameter participantEntry was null or undefined when calling updateParticipants.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ParticipantEntry>(`${this.basePath}/participant`,
            participantEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SmartObject-Endpoint-put
     * 
     * @param smartObjectEntry null
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'body', reportProgress?: boolean): Observable<SmartObjectEntry>;
    public updateSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SmartObjectEntry>>;
    public updateSmartObject(smartObjectEntry: SmartObjectEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SmartObjectEntry>>;
    public updateSmartObject(smartObjectEntry: SmartObjectEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (smartObjectEntry === null || smartObjectEntry === undefined) {
            throw new Error('Required parameter smartObjectEntry was null or undefined when calling updateSmartObject.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<SmartObjectEntry>(`${this.basePath}/smartObject`,
            smartObjectEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Training-Endpoint-put
     * 
     * @param trainingEntry null
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTrainings(trainingEntry: TrainingEntry, observe?: 'body', reportProgress?: boolean): Observable<TrainingEntry>;
    public updateTrainings(trainingEntry: TrainingEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrainingEntry>>;
    public updateTrainings(trainingEntry: TrainingEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrainingEntry>>;
    public updateTrainings(trainingEntry: TrainingEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (trainingEntry === null || trainingEntry === undefined) {
            throw new Error('Required parameter trainingEntry was null or undefined when calling updateTrainings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TrainingEntry>(`${this.basePath}/training`,
            trainingEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * user-Endpoint-put
     * 
     * @param userEntry Update user data Role
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserRole(userEntry: UserEntry, observe?: 'body', reportProgress?: boolean): Observable<UserEntry>;
    public updateUserRole(userEntry: UserEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserEntry>>;
    public updateUserRole(userEntry: UserEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserEntry>>;
    public updateUserRole(userEntry: UserEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userEntry === null || userEntry === undefined) {
            throw new Error('Required parameter userEntry was null or undefined when calling updateUserRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<UserEntry>(`${this.basePath}/user`,
            userEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
